<?php
/**
 * CommonActionsControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Apis;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailSlurp\ApiException;
use MailSlurp\Configuration;
use MailSlurp\HeaderSelector;
use MailSlurp\ObjectSerializer;

/**
 * CommonActionsControllerApi Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommonActionsControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNewEmailAddress
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\Inbox
     */
    public function createNewEmailAddress($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        list($response) = $this->createNewEmailAddressWithHttpInfo($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool);
        return $response;
    }

    /**
     * Operation createNewEmailAddressWithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\Inbox, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewEmailAddressWithHttpInfo($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        $request = $this->createNewEmailAddressRequest($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\MailSlurp\Models\Inbox' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\Inbox', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\Inbox';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\Inbox',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewEmailAddressAsync
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewEmailAddressAsync($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        return $this->createNewEmailAddressAsyncWithHttpInfo($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewEmailAddressAsyncWithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewEmailAddressAsyncWithHttpInfo($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        $returnType = '\MailSlurp\Models\Inbox';
        $request = $this->createNewEmailAddressRequest($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewEmailAddress'
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNewEmailAddressRequest($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {

        $resourcePath = '/createInbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($allow_team_access)) {
            $allow_team_access = ObjectSerializer::serializeCollection($allow_team_access, '', true);
        }
        if ($allow_team_access !== null) {
            $queryParams['allowTeamAccess'] = $allow_team_access;
        }
        // query params
        if (is_array($description)) {
            $description = ObjectSerializer::serializeCollection($description, '', true);
        }
        if ($description !== null) {
            $queryParams['description'] = $description;
        }
        // query params
        if (is_array($email_address)) {
            $email_address = ObjectSerializer::serializeCollection($email_address, '', true);
        }
        if ($email_address !== null) {
            $queryParams['emailAddress'] = $email_address;
        }
        // query params
        if (is_array($expires_at)) {
            $expires_at = ObjectSerializer::serializeCollection($expires_at, '', true);
        }
        if ($expires_at !== null) {
            $queryParams['expiresAt'] = $expires_at;
        }
        // query params
        if (is_array($expires_in)) {
            $expires_in = ObjectSerializer::serializeCollection($expires_in, '', true);
        }
        if ($expires_in !== null) {
            $queryParams['expiresIn'] = $expires_in;
        }
        // query params
        if (is_array($favourite)) {
            $favourite = ObjectSerializer::serializeCollection($favourite, '', true);
        }
        if ($favourite !== null) {
            $queryParams['favourite'] = $favourite;
        }
        // query params
        if (is_array($inbox_type)) {
            $inbox_type = ObjectSerializer::serializeCollection($inbox_type, '', true);
        }
        if ($inbox_type !== null) {
            $queryParams['inboxType'] = $inbox_type;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if (is_array($use_domain_pool)) {
            $use_domain_pool = ObjectSerializer::serializeCollection($use_domain_pool, '', true);
        }
        if ($use_domain_pool !== null) {
            $queryParams['useDomainPool'] = $use_domain_pool;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewEmailAddress1
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\Inbox
     */
    public function createNewEmailAddress1($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        list($response) = $this->createNewEmailAddress1WithHttpInfo($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool);
        return $response;
    }

    /**
     * Operation createNewEmailAddress1WithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\Inbox, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewEmailAddress1WithHttpInfo($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        $request = $this->createNewEmailAddress1Request($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\MailSlurp\Models\Inbox' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\Inbox', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\Inbox';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\Inbox',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewEmailAddress1Async
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewEmailAddress1Async($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        return $this->createNewEmailAddress1AsyncWithHttpInfo($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewEmailAddress1AsyncWithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewEmailAddress1AsyncWithHttpInfo($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {
        $returnType = '\MailSlurp\Models\Inbox';
        $request = $this->createNewEmailAddress1Request($allow_team_access, $description, $email_address, $expires_at, $expires_in, $favourite, $inbox_type, $name, $tags, $use_domain_pool);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewEmailAddress1'
     *
     * @param  bool $allow_team_access allowTeamAccess (optional)
     * @param  string $description description (optional)
     * @param  string $email_address emailAddress (optional)
     * @param  \DateTime $expires_at expiresAt (optional)
     * @param  int $expires_in expiresIn (optional)
     * @param  bool $favourite favourite (optional)
     * @param  string $inbox_type inboxType (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $use_domain_pool useDomainPool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNewEmailAddress1Request($allow_team_access = null, $description = null, $email_address = null, $expires_at = null, $expires_in = null, $favourite = null, $inbox_type = null, $name = null, $tags = null, $use_domain_pool = null)
    {

        $resourcePath = '/newEmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($allow_team_access)) {
            $allow_team_access = ObjectSerializer::serializeCollection($allow_team_access, '', true);
        }
        if ($allow_team_access !== null) {
            $queryParams['allowTeamAccess'] = $allow_team_access;
        }
        // query params
        if (is_array($description)) {
            $description = ObjectSerializer::serializeCollection($description, '', true);
        }
        if ($description !== null) {
            $queryParams['description'] = $description;
        }
        // query params
        if (is_array($email_address)) {
            $email_address = ObjectSerializer::serializeCollection($email_address, '', true);
        }
        if ($email_address !== null) {
            $queryParams['emailAddress'] = $email_address;
        }
        // query params
        if (is_array($expires_at)) {
            $expires_at = ObjectSerializer::serializeCollection($expires_at, '', true);
        }
        if ($expires_at !== null) {
            $queryParams['expiresAt'] = $expires_at;
        }
        // query params
        if (is_array($expires_in)) {
            $expires_in = ObjectSerializer::serializeCollection($expires_in, '', true);
        }
        if ($expires_in !== null) {
            $queryParams['expiresIn'] = $expires_in;
        }
        // query params
        if (is_array($favourite)) {
            $favourite = ObjectSerializer::serializeCollection($favourite, '', true);
        }
        if ($favourite !== null) {
            $queryParams['favourite'] = $favourite;
        }
        // query params
        if (is_array($inbox_type)) {
            $inbox_type = ObjectSerializer::serializeCollection($inbox_type, '', true);
        }
        if ($inbox_type !== null) {
            $queryParams['inboxType'] = $inbox_type;
        }
        // query params
        if (is_array($name)) {
            $name = ObjectSerializer::serializeCollection($name, '', true);
        }
        if ($name !== null) {
            $queryParams['name'] = $name;
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if (is_array($use_domain_pool)) {
            $use_domain_pool = ObjectSerializer::serializeCollection($use_domain_pool, '', true);
        }
        if ($use_domain_pool !== null) {
            $queryParams['useDomainPool'] = $use_domain_pool;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emptyInbox
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id inboxId (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function emptyInbox($inbox_id)
    {
        $this->emptyInboxWithHttpInfo($inbox_id);
    }

    /**
     * Operation emptyInboxWithHttpInfo
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id inboxId (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emptyInboxWithHttpInfo($inbox_id)
    {
        $request = $this->emptyInboxRequest($inbox_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emptyInboxAsync
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id inboxId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emptyInboxAsync($inbox_id)
    {
        return $this->emptyInboxAsyncWithHttpInfo($inbox_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emptyInboxAsyncWithHttpInfo
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id inboxId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emptyInboxAsyncWithHttpInfo($inbox_id)
    {
        $returnType = '';
        $request = $this->emptyInboxRequest($inbox_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emptyInbox'
     *
     * @param  string $inbox_id inboxId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emptyInboxRequest($inbox_id)
    {
        // verify the required parameter 'inbox_id' is set
        if ($inbox_id === null || (is_array($inbox_id) && count($inbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbox_id when calling emptyInbox'
            );
        }

        $resourcePath = '/emptyInbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($inbox_id)) {
            $inbox_id = ObjectSerializer::serializeCollection($inbox_id, '', true);
        }
        if ($inbox_id !== null) {
            $queryParams['inboxId'] = $inbox_id;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailSimple
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $email_options emailOptions (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendEmailSimple($email_options)
    {
        $this->sendEmailSimpleWithHttpInfo($email_options);
    }

    /**
     * Operation sendEmailSimpleWithHttpInfo
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $email_options emailOptions (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailSimpleWithHttpInfo($email_options)
    {
        $request = $this->sendEmailSimpleRequest($email_options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailSimpleAsync
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $email_options emailOptions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailSimpleAsync($email_options)
    {
        return $this->sendEmailSimpleAsyncWithHttpInfo($email_options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailSimpleAsyncWithHttpInfo
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $email_options emailOptions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailSimpleAsyncWithHttpInfo($email_options)
    {
        $returnType = '';
        $request = $this->sendEmailSimpleRequest($email_options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailSimple'
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $email_options emailOptions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendEmailSimpleRequest($email_options)
    {
        // verify the required parameter 'email_options' is set
        if ($email_options === null || (is_array($email_options) && count($email_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_options when calling sendEmailSimple'
            );
        }

        $resourcePath = '/sendEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($email_options)) {
            $_tempBody = $email_options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
